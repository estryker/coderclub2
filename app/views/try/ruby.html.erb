  <% 
       code_map = 
       {
      
       "DataStructures" => 
    { 
    "FixNums" => ["2 + 2", "puts 3/5", "puts 3.0/5"],
    "Strings" => ["s = \"hello\"","s.length"],
    "Arrays" => ["a = [1,2,3]", "puts a[0]","puts a[0].class","a.length","a.sample", "b = %w[1,2,3]\nputs a == b\nputs b[0].class"]
    },

    "FlowControl" => 
    {
    
    "Loops" => [
    %Q{
3.times do 
  puts \"hello\"
end},
    %Q{
3.times do | i | 
  puts i
end },
    %Q{
(0..10).each {|i| puts i }
}
    ],
    
    "Conditionals" => [
    %Q{
if true
  puts \"true\"
end},
    %Q{
foo = [true,false].sample
if foo
  puts \"foo\"
else
  puts \"not foo\"
end},
    %Q{
if 3 < 5
  puts \"3\"
elsif 4 > 5
  puts \"what??\"
else
  puts \"whatever\"
end}
      ]
      },
      "UserInteraction" => 
      { 
      "Prompt for Input" => 
      [
%Q{
# warning - this is not standard Ruby! Use "gets" when using Ruby in a console.
name = $$.prompt "What is your name?"
puts name
},
%Q{
# warning - this is not standard Ruby! Use "gets" when using Ruby in a console.
# The .to_i converts the String to an Integer
num = gets_prompt("What is your lucky number?").to_i
puts num
}
      ],
      "Alert Output" => 
      [
%Q{
# warning - this is not standard Ruby! Use "puts" when using Ruby in a console.
$$.alert "Hello " + name
},
%Q{
# warning - this is not standard Ruby! Use "puts" when using Ruby in a console.
$$.alert "My lucky number is \#\{num\} too!"
}
      ]
      }
      }
      %>

 <script>
  // inject code to the code text area
  function injectCode(extra_code) {
    myCodeMirror.setValue(myCodeMirror.getValue() + "\n" + extra_code);
  }
</script>
<!-- https://jqueryui.com/dialog/#modal-form -->
<!-- Note that this script uses erb. TODO: make it a bit less kludgey  -->
<script>
$(function () {
    var dialog;
    function selectFile() {
      var modalFormInput = document.getElementById("githubRadioButtons");
      var githubFileName = '';
      var newFileName = '';
      var newFile = false;
      for (var i = 0, length = modalFormInput.length; i < length; i++) {
        if(modalFormInput[i].checked) {
          // alert(modalFormInput[i].value);
      if(modalFormInput[i].value == "on") {
            newFile = true;
          } else {
            githubFileName = modalFormInput[i].value;
          }
          
        }else if(modalFormInput[i].name == "newFileName") {
          newFileName = modalFormInput[i].value;
        }
      }
      if(newFile) {
        githubFileName = newFileName;
      }
      console.log("Selecting: " + githubFileName);
      var githubInput = document.getElementById("githubFileName");
      githubInput.value = githubFileName;
      return true;
    }
    dialog = $( "#dialog-form" ).dialog({
        autoOpen: false,
        height: 400,
        width: 350,
        modal: true,
        buttons: {
          "Select File": function(){
                          $(this).dialog('close');
                          selectFile(); 
                          document.getElementById("code_form").submit();
                      },
          Cancel: function() {
            dialog.dialog( "close" );
          }
        }
      }); 
     function getGithubFiles() {
        $.ajax({
          url: "/github/myfiles.json",
          type: "GET",
          success:  function(event) { 
            console.log("response from myfiles");
            console.log(event); 
  
            var curr_div = document.getElementById("githubRadioButtons");
            // clear the innner HTML just in case the user brings up the dialog more than once
            curr_div.innerHTML = "";
            for(i = 0; i < event['file_name'].length; i++) {          
               var new_choice = document.createElement('div');
               var file_name = event['file_name'][i];
               if(file_name == '<%= @file_name || '' %>') {
                 new_choice.innerHTML = "<br> <input type='radio' name='fileToEdit' value='"+file_name+ "' checked='checked'> " + file_name ;
               }else {
                 new_choice.innerHTML = "<br> <input type='radio' id='newFileRadio' name='fileToEdit' value='"+file_name+ "'> " + file_name ;
               }
               curr_div.appendChild(new_choice);
               console.log(file_name);
             }
            var new_file_name = document.createElement('div');
            new_file_name.innerHTML = "<br> <input type='radio' name='fileToEdit',value=''>New File: <input type='text_box' name='newFileName' value='newfile.rb'/> "; 
            curr_div.appendChild(new_file_name);
  
            dialog.dialog("open");
            return true;
         },
         failure: function(event) {
      dialog.dialog( "open");		 
          alert("couldn't save ...");
           console.log("failed to get myfile listing");
      return false;
         }
        
        })
       return false;
     }
    $( "#github-save-button" ).button().on( "click", getGithubFiles); 
  });

</script>

<!-- the modal form for selecting a file to save to on GitHub -->
<div id="dialog-form" title="Select file to save to on GitHub.">
   <form id="githubRadioButtons">
    
   </form>
</div>
<script> 
  $(function () {
    dialog = $( "#help-form" ).dialog({
        autoOpen: false,
        height: 800,
        width: 1000,
        modal: true,
        buttons: {
          
          Close: function() {
            dialog.dialog( "close" );
          }
        }
      }); 
      function helpModal() {       
        dialog.dialog("open");
        return true;
      } 
      $( "#rubyHelp" ).button().on( "click", helpModal); 
  });
</script>
 <div id="help-form" title="Help">
      <h3> Getting Started </h3>
	     See the examples in the other tabs to get you started with some Ruby basics. In the tabs, you can see some examples of Ruby code, and then inject the code into your editor on the left.  
	     <p>
		     When you are ready to run the code, just click the  <input name="commit" class="btn btn-primary" type="button" value="Run! " /> button to see the output.  The output after the '=>' line is the value of the last expression that was executed. 
	     </p>
	      If you want to save your code, click the <input name="commit" class="btn btn-secondary" type="button" value="Create URL " /> button, which will give you a URL that you can save off in a file, or send to a friend to see your amazing code!
		   <p>
         &nbsp
       </p>
	     <h3> More advanced Ruby </h3>
	      	Once you get through the examples and you want to learn more, try using some of the 'Ruby links' in the links tab at the top of the page. 
	  	  <p>
         &nbsp
       </p>
     <% code_map.each do | tab, category_map | %>
       <% category_map.each do | category, code_array | %> 
          &nbsp 
	       <h3> <%= category %> </h3> 
	        <% code_array.each do | code_snippet | 
	          div_id = "code_example_#{code_snippet.object_id}" %>
          <div class="row">
		        <div class="col-md-8">
		        <pre> 
<code>
<%= code_snippet %>
</code>
		        </pre>
            
		        <script>
		        code_string_<%=code_snippet.object_id %> = '<%= raw code_snippet.gsub("\n",'\n') %>'
		        console.log('<%= raw code_snippet.gsub("\n",'\n') %>')
		        </script>
		      </div> <!-- end col -->
		        <div class="col-md-2">
		          <input name="commit" class="btn btn-secondary" onclick=" injectCode(code_string_<%= code_snippet.object_id %>); " type="button" value="Inject code" />
		          </div>
	        </div> <!-- end row for example -->
	      <% end # code_array.each %>
	    <% end # category_map.each %>

	  <% end # code_map.each%>

</div>
 
<div class="container"> 

  <div class="page-header"><h1>Ruby!</h1></div>
   <hr />
  <div class="row" id="wrapper">
   <div id="editor_wrapper" class="col-md-6"> 
     
   
      <%= form_tag('/try/ruby/save', method: 'post', id: 'code_form', width:"10") do -%> 
      <%=  hidden_field_tag "githubFileName" %>
      
      <textarea cols="500" class="well" style="padding:0" id="code" name="code" rows="10"><%= @code %></textarea>

   </div>
   <div class="col-md-6 " style="height: 450px; overflow-y: auto;">
	     <h2> Code output: </h2>
       <p>
	       <div id="code_output"  class="card-body p-3"  > 
	       </div>
       </p>
    </div>
  </div>
<script> 
	function codeMirrorLoaded(){
	  console.log("code mirror loaded");
	}
  var myCodeMirror = CodeMirror.fromTextArea(code, {mode: "text/x-ruby", matchBrackets: true, indentUnit: 2, 
                                                   lineNumbers: true, theme: "rubyblue", onLoad: codeMirrorLoaded()});
  myCodeMirror.setSize(500,400);
  myCodeMirror.refresh()
</script>
      
      <!-- don't seem to need this
	   <script>
	     function replaceFormContents(new_text) {
	     code_text_area = document.getElementById("coder");
	     code_text_area.innerHTML = new_text;
	     }
	   </script>
           --> 
<script>
        // call this each time a piece of code is run so that new code doesn't appear below an old URL
        function eraseFlash() {
          flash = document.getElementById("flash_message");
          if(flash != null) {
            flash.innerHTML = "";
          }
        }
 </script>
      <div class="row" id="wrapper">
      <!-- onclick="Opal.Opal.$ruby_exec(myCodeMirror.getValue()); eraseFlash()"  -->
      <input id="commitRubyCode" class="btn btn-primary"  type="button" value="Run! " />
      
      <%= submit_tag("Create URL", class: 'btn btn-secondary', type: 'submit')  %> <!-- , onclick: "replaceFormContents(myCodeMirror.getValue())" -->
      <input id="rubyHelp" class="btn btn-secondary"  type="button" value="Help " />

      <% if signed_in? or not ENV['GITHUB_TEST_USER'].nil? %>
        <%= submit_tag("SaveToGithub", class: 'btn', type: 'submit',id: "github-save-button")  %> 
      <% end %>
      <div id="dynamicFileNames"> </div>
      
      <% end -%>      
      <%= form_tag('/try/ruby/save', method: 'post', :'data-remote' => "true") do -%>     
      <% end -%>

    </div><!-- end row -->
  </div> 
</div> <!-- end container -->
